
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

/ {
  behaviors {
    #include "macros.dtsi"
    #include "version.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <170>;
        quick_tap_ms = <300>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
        require-prior-idle-ms = <100>;
        hold-trigger-on-release;
    };
  };

combos {
compatible = "zmk,combos";


/* Horizontal combos - left hand */
COMBO(esc,   &kp ESC,       16 17)
COMBO(ret,   &kp RETURN,    17 18)
/*COMBO(mouse, &smart_mouse,  LT3 LT1)*/

COMBO(tab,   &kp TAB,       30 31)
COMBO(repeat, &kp C_AC_REDO,    31 32)

/*COMBO(cut,   &kp LC(X),     LB3 LB1)*/
COMBO(copy,  &kp LC(INS),   48 49)
COMBO(paste, &kp LS(INS),   49 50)

/* Horizontal combos - right hand */
COMBO(lbrc,  &kp LBRC,      23 24)
COMBO(rbrc,  &kp RBRC,      24 25)

COMBO(lpar,  &kp LPAR,      41 42)
COMBO(rpar,  &kp RPAR,      42 43)
// COMBO(lt,    &kp LT,        41 42)
// COMBO(gt,    &kp GT,        42 43)

COMBO(lbkt,  &kp LBKT,      55 56)
COMBO(rbkt,  &kp RBKT,      56 57)
// COMBO(lbrc,  &kp LBRC,      55 56)
// COMBO(rbrc,  &kp RBRC,      56 57)

// COMBO(grk,   &sl UC,        RT1 RT3)
// COMBO(cpgrk, &sls 0,        RT1 RT2 RT3)

/* Vertical combos - left hand */
COMBO(at,    &kp AT,        16 30)
COMBO(hash,  &kp HASH,      17 31)
COMBO(dllr,  &kp DLLR,      18 32)
COMBO(prcnt, &kp PRCNT,     19 33)

COMBO(grave, &kp GRAVE,     30 48)
COMBO(bslh,  &kp BSLH,      31 49)
COMBO(equal, &kp EQUAL,     32 50)
COMBO(tilde, &kp TILDE,     33 51)

/* Vertical combos - right hand */
COMBO(caret, &kp CARET,     22 40)
COMBO(plus,  &kp PLUS,      23 41)
COMBO(star,  &kp STAR,      24 42)
COMBO(amps,  &kp AMPS,      25 43)

COMBO(under, &kp UNDER,     40 54)
COMBO(minus, &kp MINUS,     41 55)
COMBO(fslh,  &kp FSLH,      42 56)
COMBO(pipe,  &kp PIPE,      43 57)



// COMBO(esc,   &kp ESC,       16 17)
// COMBO(ret,   &kp RETURN,    17 18)
// COMBO(lbkt,  &kp LBKT,      55 56)
// COMBO(rbkt,  &kp RBKT,      56 57)
//COMBO(lbrc,  &kp LBRC,      55 56)
//COMBO(rbrc,  &kp RBRC,      56 57)
/*
*COMBO(LEFT_SHIFT, &kp LEFT_SHIFT, 31 32)
*COMBO(RIGHT_SHIFT, &kp RIGHT_SHIFT, 41 42)
*/
};

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
      &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5                    &tog 1                                                                                      &mo 3  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
        &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T                     &tog 4                                                                                      &kp RIGHT_PARENTHESIS   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
        &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G            &kp LBKT  &kp LCTRL  &kp LGUI                  &kp LEFT_ALT              &kp RCTRL  &kp RBKT   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
 &kp LEFT_SHIFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                       &kp HOME                     &kp PG_UP                                           &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
          &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                        &hm LEFT_SHIFT BSPC      &kp DEL   &lt 2 END                     &kp PG_DN  &kp ENTER        &hm RIGHT_SHIFT SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT      &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1   &kp F2  &kp F3   &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3          &kp F7                &kp F8                 &kp F9          &kp F10          &kp F11           &kp F12
 &trans   &trans  &trans   &trans  &trans  &trans             &none                                                   &none  &kp LEFT_ARROW        &kp DOWN_ARROW           &kp UP_ARROW  &kp RIGHT_ARROW            &none      &kp C_VOL_UP
 &trans  &kp ESC  &trans  &kp DEL  &trans  &trans             &none  &trans  &trans                  &trans  &trans   &none           &none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp C_PLAY_PAUSE
 &trans   &trans  &trans   &trans  &trans  &trans                            &trans                  &trans                           &none      &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &kp EQUAL        &kp MINUS      &kp C_VOL_DN
 &trans   &trans  &trans   &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans                                &trans                 &trans           &trans           &trans        &kp C_NEXT
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none    &macro_ver         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

      layer_nocombo {
            bindings = <
      &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5                    &tog 1                                                                                      &mo 3  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
        &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T                     &tog 4                                                                                      &kp RIGHT_PARENTHESIS   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
        &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G            &kp LBKT  &kp LCTRL  &kp LGUI                  &kp LEFT_ALT              &kp RCTRL  &kp RBKT   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
 &kp LEFT_SHIFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                       &kp HOME                     &kp PG_UP                                           &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
          &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                        &hm LEFT_SHIFT BSPC      &kp DEL   &lt 2 END                     &kp PG_DN  &kp ENTER        &hm RIGHT_SHIFT SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT      &mo 2
            >;
        };

    };
};
